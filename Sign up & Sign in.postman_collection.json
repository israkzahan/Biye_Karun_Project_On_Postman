{
	"info": {
		"_postman_id": "bfc3040b-1b48-4ed0-95e3-df5f0b289aa0",
		"name": "Sign up & Sign in",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28411780",
		"_collection_link": "https://universal-meadow-6789.postman.co/workspace/Biye-Korun~4890289e-db5e-4eaf-876b-245ef130110d/collection/20098857-bfc3040b-1b48-4ed0-95e3-df5f0b289aa0?action=share&source=collection_link&creator=28411780"
	},
	"item": [
		{
			"name": "Register",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "User should be able to register on the website",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"register_AccessToken\", jsonData.token.accessToken);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"register_RefreshToken\", jsonData.token.refreshToken);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"registered_User_id\", jsonData.data._id);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"registered_Email_id\", jsonData.data.email);\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can able to register on the website successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to register on the website within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to register on the website \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'Registered succeed' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"     pm.expect(pm.response.text()).to.include(\"Registration succeed\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to Registered with valid information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"dateOfBirth\": \"2023-10-26\",\r\n  \"gender\": \"string\",\r\n  \"postedBy\": \"Myself\",\r\n  \"language\": [\r\n    \"Bangla\",\r\n    \"English\",\r\n    \"Urdu\"\r\n  ],\r\n  \"country\": \"Bangladesh\",\r\n  \"religion\": \"Islam\",\r\n  \"password\": \"testPassword1@\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "User should not be able to register on the website using the existing email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed the registration using existing email\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the registration using existing email\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Conflict' status code when try to executed the registration using existing email \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the registration using existing email\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"Rasida21@gmail.com\",\r\n   \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"dateOfBirth\": \"2023-10-14\",\r\n  \"gender\": \"string\",\r\n  \"postedBy\": \"Myself\",\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"country\": \"Bangladesh\",\r\n  \"religion\": \"string\",\r\n  \"password\": \"testPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "User should not be able to register on the website without giving the first name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed the registration to keeping the first name field empty\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the registration to keeping the first name field empty\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed the registration to keeping the first name field empty \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the registration to keeping the first name field empty\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"firstName\": \"\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"dateOfBirth\": \"2023-10-14\",\r\n  \"gender\": \"string\",\r\n  \"postedBy\": \"Myself\",\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"country\": \"Bangladesh\",\r\n  \"religion\": \"string\",\r\n  \"password\": \"testPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "User should not be able to register on the website without giving the last name",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed the registration to keeping the last name field empty\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the registration to keeping the last name field empty\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed the registration to keeping the last name field empty \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the registration to keeping the last name field empty\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"\",\r\n  \"dateOfBirth\": \"2023-10-14\",\r\n  \"gender\": \"string\",\r\n  \"postedBy\": \"Myself\",\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"country\": \"Bangladesh\",\r\n  \"religion\": \"string\",\r\n  \"password\": \"testPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "User should not be able to register on the website without giving the gender",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed the registration to keeping the gender field empty\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the registration to keeping the gender field empty\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed the registration to keeping the gender field empty \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the registration to keeping the gender field empty\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"dateOfBirth\": \"2023-10-14\",\r\n  \"gender\": \"\",\r\n  \"postedBy\": \"Myself\",\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"country\": \"Bangladesh\",\r\n  \"religion\": \"string\",\r\n  \"password\": \"testPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "User should not be able to register on the website without giving the dateOfBirth",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed the registration to keeping the gender field empty\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the registration to keeping the gender field empty\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed the registration to keeping the gender field empty \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the registration to keeping the gender field empty\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{$randomExampleEmail}}\",\r\n  \"firstName\": \"Shakil\",\r\n  \"lastName\": \"Ahmed\",\r\n  \"dateOfBirth\": \"\",\r\n  \"gender\": \"string\",\r\n  \"postedBy\": \"Myself\",\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"country\": \"Bangladesh\",\r\n  \"religion\": \"string\",\r\n  \"password\": \"testPassword\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/register",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"register"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Verify OTP",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to verify email/phone by using OTP",
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"otp\": \"077747\",\r\n  \"email\": \"{{registered_Email_id}}\",\r\n  \"otpType\": \"email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/verifyotp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"verifyotp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to verify the OTP without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed verify otp without the token\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed verify otp without the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed verify otp without the token \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Email is a required field' message when try to executed verify otp without the token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Email is a required field\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed verify otp without the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"otp\": \"077747\",\r\n  \"email\": \"\",\r\n  \"otpType\": \"email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/verifyotp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"verifyotp"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I should not be able to verify the OTP without the email id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed verify otp without the email id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed verify otp without the email id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed verify otp without the email id \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Email is a required field' message when try to executed verify otp without the email id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Email is a required field\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed verify otp without the email id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"otp\": \"077747\",\r\n  \"email\": \"\",\r\n  \"otpType\": \"email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/verifyotp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"verifyotp"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Re-Send OTP",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to  resend OTP using Email & Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"OTP\", jsonData.otp);\r",
											"\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can able to login the website successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to login the website within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to login the website \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'OTP send succeed to email' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"OTP send succeed to email\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to Registered with valid information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{registered_Email_id}}\",\r\n  \"otpType\": \"email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/resendotp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"resendotp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to  resend OTP without the email_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed resend OTP without the email_id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed resend OTP without the email_id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed resend OTP without the email_id \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'email must be a valid email' message when try to executed resend OTP without the email_id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"    pm.expect(pm.response.text()).to.include(\"email must be a valid email\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed resend OTP without the email_id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"{{}}\",\r\n  \"otpType\": \"email\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/resendotp",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"resendotp"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Login_user",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to user login valid email and Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"user_AccessToken\", jsonData.token.accessToken);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"user_RefreshToken\", jsonData.token.refreshToken);\r",
											"\r",
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"User ID\", jsonData.data._id);\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can able to login the website successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to login the website within 2000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to login the website \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'Login succeed' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Login succeed\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to Registered with valid information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"mituldas751@gmail.com\",\r\n  \"password\": \"Mi123456.\"\r\n\r\n//   \"email\": \"Sathi35@gmail.com\",\r\n//   \"password\": \"Xyz@12345M\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to login with valid email and invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '401' status code when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Unauthorized' status code when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Invalid email or password' message when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid email or password\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"Rasida21@gmail.com\",\r\n  \"password\": \"Hjwsk#265\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I should not be able to login with invalid email and valid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '401' status code when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Unauthorized' status code when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Invalid email or password' message when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid email or password\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"Rasida21@gmail.com\",\r\n  \"password\": \"Hjwsk#265\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"login"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I should not be able to login with invalid email and invalid Password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '401' status code when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Unauthorized' status code when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Invalid email or password' message when try to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Invalid email or password\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed the login  with valid email and invalid Password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"Rasida212@gmail.com\",\r\n  \"password\": \"Hjwsk#265\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/login",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"login"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "(Need To discuss)Access Token",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to access on the login token",
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"refreshToken\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/access-token",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"access-token"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Change Password",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to change password with valid current password",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to change the password successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to change the password within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to change the password \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'Password change succeed' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Password changed succeed\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to change the password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"currentPassword\":  \"Ma123456.\",\r\n  \"newPassword\": \"Xyz@12345M.\",\r\n  \"confirmPassword\": \"Xyz@12345M.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/changepassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"changepassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to change the password without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '401' status code when try to change the password without the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to change the password without the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Unauthorized' status code when try to change the password without the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Authorization required' message when try to change the password without the token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed change the password without the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"currentPassword\":  \"Ma123456.\",\r\n  \"newPassword\": \"Xyz@12345M.\",\r\n  \"confirmPassword\": \"Xyz@12345M.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/changepassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"changepassword"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Forgot Password",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to forgot password with valid information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to click forgot password successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to click forgot password within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to click forgot password \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'OTP email sent success!' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"OTP email sent success!\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to click forgot password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"mituldas751@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/forgotpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"forgotpassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to do forgot password with invalid email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '404' status code when try to do forgot password with invalid email\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when try to do forgot password with invalid email\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Not Found' status code when try to do forgot password with invalid email\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'User not found with this email' message when try to do forgot password with invalid email\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"User not found with this email\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed to do forgot password with invalid email\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"mituldas75@gmail.com\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/forgotpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"forgotpassword"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Reset Password",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to reset password with valid credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to reset password successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to reset password within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to reset password \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'OTP email sent success!' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"OTP email sent success!\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to reset password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"mituldas751@gmail.com\",\r\n  \"otp\": \"112255\",\r\n  \"password\": \"Mi123456.\",\r\n  \"confirmPassword\": \"Mi123456.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/resetpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"resetpassword"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should be able to reset password with valid credential",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to reset password successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to reset password within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to reset password \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'OTP email sent success!' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"OTP email sent success!\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to reset password\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"mituldas751@gmail.com\",\r\n  \"otp\": \"112255\",\r\n  \"password\": \"Mi123456.\",\r\n  \"confirmPassword\": \"Mi123456.\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/resetpassword",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"resetpassword"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Send OTP",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "User should be able to send the OTP to the email",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to send the OTP successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to send the OTP within 5000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(5000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to send the OTP \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'OTP Email send successfully' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"OTP Email send successfully\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to send the OTP \", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJfaWQiOiI2NTM5ZmJhNjg2YTk1ZmUzMTg2N2EzYjYiLCJlbWFpbCI6ImtlbnRvbi5jYXNzaW5AZXhhbXBsZS5uZXQiLCJ1c2VySWQiOiJCS0xPNlI4WEFIIiwiZmlyc3ROYW1lIjoiU2hha2lsIiwibGFzdE5hbWUiOiJBaG1lZCIsInJvbGUiOiJ1c2VyIiwicGFja2FnZSI6IjY1MzlmYmE2ODZhOTVmZTMxODY3YTNiNCIsImlhdCI6MTY5ODI5ODc5MCwiZXhwIjoxNjk4Mzg1MTkwfQ.AArlXLxBjP4dnKGw8_B63_5BTGxiVQeVFjgjeyYqb_Y",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"kenton.cassin@example.net\",\r\n  \"otpType\": \"email\"\r\n}"
								},
								"url": {
									"raw": "https://staging-api.biyekorun.us/api/user/resendotp",
									"protocol": "https",
									"host": [
										"staging-api",
										"biyekorun",
										"us"
									],
									"path": [
										"api",
										"user",
										"resendotp"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "User should not be able to send the OTP without inputting the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed send otp without the email id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed send otp without the email id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed send otp without the email id \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Email is a required field' message when try to executed send otp without the email id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Email is a required field\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed send otp without the email id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"otpType\": \"email\"\r\n}"
								},
								"url": {
									"raw": "https://staging-api.biyekorun.us/api/user/otp-send",
									"protocol": "https",
									"host": [
										"staging-api",
										"biyekorun",
										"us"
									],
									"path": [
										"api",
										"user",
										"otp-send"
									]
								}
							},
							"response": []
						},
						{
							"name": "User should not be able to send the OTP with the email id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin should get the '400' status code when try to executed send otp without the email id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin should get the response below 2000 ms when try to executed send otp without the email id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'Bad Request' status code when try to executed send otp without the email id \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'Email is a required field' message when try to executed send otp without the email id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"email\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Email is a required field\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to executed send otp without the email id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"email\": \"\",\r\n  \"otpType\": \"email\"\r\n}"
								},
								"url": {
									"raw": "https://staging-api.biyekorun.us/api/user/otp-send",
									"protocol": "https",
									"host": [
										"staging-api",
										"biyekorun",
										"us"
									],
									"path": [
										"api",
										"user",
										"otp-send"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		}
	]
}