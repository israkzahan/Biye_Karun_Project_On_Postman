{
	"info": {
		"_postman_id": "d5f20604-19a9-406a-ac5d-39968ebdb95a",
		"name": "User Profile",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "28411780",
		"_collection_link": "https://universal-meadow-6789.postman.co/workspace/Biye-Korun~4890289e-db5e-4eaf-876b-245ef130110d/collection/20098857-d5f20604-19a9-406a-ac5d-39968ebdb95a?action=share&source=collection_link&creator=28411780"
	},
	"item": [
		{
			"name": "Update Image",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to update user profile picture",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on update image successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on update image within 3000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see all user on the update image \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see all user on the update image\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"isBlur\": true,\r\n  \"isVisible\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/update-image/{{Upload_ImageID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"update-image",
										"{{Upload_ImageID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to update user profile picture given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to update his profile image without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to update his profile image without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Unauthorized' status code when executing to update his profile profile image inputting the token \", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to update the profile image without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update the profile image without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/update-image/{{Upload_ImageID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"update-image",
										"{{Upload_ImageID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to update user profile picture given without image id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '500' status code when executing to update his profile image without inputting the token\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to update his profile image without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Internal Server Error' status code when executing to update his profile profile image inputting the token \", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to update the profile image without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update the profile image without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/update-image/{{}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"update-image",
										"{{}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Delete Image",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to delete on the user image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on delete image successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on delete image within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see all user on the delete image \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see all user on the delete image\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/deleteImage/{{Upload_ImageID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"deleteImage",
										"{{Upload_ImageID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to delete on the user image given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to delete on the user image without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to delete on the user image without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to delete on the user image without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/deleteImage/{{Upload_ImageID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"deleteImage",
										"{{Upload_ImageID}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to delete on the user image given without upload id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should delete the '500' status code when executing to delete on the user image without inputting the upload id\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should delete the response below 2000 ms when executing to delete on the user image without inputting the upload id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should delete the 'Internal Server Error' status code name when executing to delete on the user image without inputting the upload id\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to delete the checklist without inputting the upload id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/deleteImage/{{}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"deleteImage",
										"{{}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Profile image update",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to Upload on the profile image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on update image successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on update image within 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see all user on the update image \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see all user on the update image\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/TS4U/Desktop/B-1.png"
										},
										{
											"key": "isVisible",
											"value": "true",
											"type": "text"
										},
										{
											"key": "isBlur",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/profile-image-upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"profile-image-upload"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to Upload on the profile image given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should PATCH the '401' status code when executing to Upload on the profile image without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should PATCH the response below 2000 ms when executing to Upload on the profile image without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should PATCH the 'Unauthorized' status code name when executing to Upload on the profile image without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/TS4U/Desktop/11.png"
										},
										{
											"key": "isVisible",
											"value": "true",
											"type": "text"
										},
										{
											"key": "isBlur",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/profile-image-upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"profile-image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to Upload on the profile image given without image",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should PATCH the '500' status code when executing to Upload on the profile image without inputting the image\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should PATCH the response below 2000 ms when executing to Upload on the profile image without inputting the image\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should PATCH the 'Internal Server Error' status code name when executing to Upload on the profile image without inputting the image\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the image\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": []
										},
										{
											"key": "isVisible",
											"value": "true",
											"type": "text"
										},
										{
											"key": "isBlur",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/profile-image-upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"profile-image-upload"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to Upload on the profile image given without visible information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should PATCH the '500' status code when executing to Upload on the profile image without inputting the visible information\", function () {\r",
											"    pm.response.to.have.status(500);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should PATCH the response below 2000 ms when executing to Upload on the profile image without inputting the visible information\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should PATCH the 'Internal Server Error' status code name when executing to Upload on the profile image without inputting the visible information\", function () {\r",
											"    pm.response.to.have.status(\"Internal Server Error\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to PATCH the checklist without inputting the image\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": []
										},
										{
											"key": "isVisible",
											"value": "true",
											"type": "text"
										},
										{
											"key": "isBlur",
											"value": "true",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/profile-image-upload",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"profile-image-upload"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Partner-Preferences",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to find on the preference partner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can find the users on the preference partner successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can find the users on the preference partner within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to find on the preference partner on the second steps \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to find on the preference partner\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when find to preference partner information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when find to preference partner information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when find to preference partner information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to find preference partner information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find the partner  preference information without minimum income range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to find on the preference partner information without inputting the minimum income range\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to find on the preference partner information without inputting the minimum income range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to find on the preference partner information without inputting the minimum income range\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the minimum income range\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"\",\r\n  \"maxIncome\": \"50000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without maximum income range",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to find on the preference partner information without inputting the maximum income range\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to find on the preference partner information without inputting the maximum income range\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to find on the preference partner information without inputting the maximum income range\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to find on the preference partner information without inputting the maximum income range\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without profession",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when find on the preference partner information without inputting the profession\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when find on the preference partner information without inputting the profession\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when find on the preference partner information without inputting the profession\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to preference partner information without inputting the profession\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n \r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without minimum  Age",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when find on the preference partner information without inputting the minimum Age\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when find on the preference partner information without inputting the minimum Age\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when find on the preference partner information without inputting the minimum Age\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the minimum Age\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without maximum  Age",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to find on the preference partner information without inputting the maximum Age\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to find on the preference partner information without inputting the maximum Age\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to find on the preference partner information without inputting the maximum Age\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the maximum Age\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without maximum  height",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to find on the preference partner information without inputting the maximum height\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to find on the preference partner information without inputting the maximum height\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to find on the preference partner information without inputting the maximum height\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the maximum height\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"60\",\r\n  \"maxHeight\": \"\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find on the preference partner information given without minimum height",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to find on the preference partner information without inputting the minimum height\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to find on the preference partner information without inputting the minimum height\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to find on the preference partner information without inputting the minimum height\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the minimum height\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});     "
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"minAge\": \"18\",\r\n  \"maxAge\": \"35\",\r\n  \"minHeight\": \"\",\r\n  \"maxHeight\": \"68\",\r\n  \"maritalStatus\": [\r\n    \"Never Married\"\r\n  ],\r\n  \"religion\": [\r\n    \"Islam\"\r\n  ],\r\n  \"community\": [\r\n    \"Bengali\",\r\n    \"English\",\r\n    \"French\"\r\n  ],\r\n  \"nativeLanguage\": [\r\n    \"Bangla\"\r\n  ],\r\n  \"country\": [\r\n    \"Bangladesh\"\r\n  ],\r\n  \"residencyStatus\": [\r\n    \"Citizen\"\r\n  ],\r\n  \"qualification\": [\r\n    \"Bachelor Degree\"\r\n  ],\r\n  \"workingWith\": [\r\n    \"Private Company\"\r\n  ],\r\n  \"profession\": [\r\n    \"Software Engineer\"\r\n  ],\r\n  \"minIncome\": \"20000\",\r\n  \"maxIncome\": \"200000\",\r\n  \"postedBy\": [\r\n    \"Self\"\r\n  ],\r\n  \"diet\": [\r\n    \"Vegiterian\"\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/partner-preferences",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"partner-preferences"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Verify Nid(Used Only one time any Account))",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to verify on the insert Nid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on verify on the insert Nid successfully\", function () {\r",
											"    pm.response.to.have.status(409);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on Update on the second steps within 6000ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(6000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to verify on the insert Nid \", function () {\r",
											"    pm.response.to.have.status(\"Conflict\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to verify on the insert Nid\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "image",
											"type": "file",
											"src": "/C:/Users/TS4U/Desktop/1000_F_107587971_V5LF7HVAwCICEFrcG61VQvl45Ey5eRn0.jpg"
										},
										{
											"key": "idType",
											"value": "NID",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/insert-verify-id",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"insert-verify-id"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Hobbies",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to update all hobbies on the profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on update all hobbies on the profile successfully\", function () {\r",
											"    pm.response.to.have.status(201);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on update all hobbies on the profile within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to user on the update all hobbies on the profile \", function () {\r",
											"    pm.response.to.have.status(\"Created\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update all hobbies on the profile\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interests\": [\r\n    {\r\n      \"categories\": \"Creative\",\r\n      \"hobbies\": [\r\n        \"Writing\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Fun\",\r\n      \"hobbies\": [\r\n        \"Writing\",\r\n        \"Music\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Fitness\",\r\n      \"hobbies\": [\r\n        \"Cycling\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Others Interests\",\r\n      \"hobbies\": [\r\n        \"Pets\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/hobbies-interest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"hobbies-interest"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to update all hobbies on the profile information given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to the update all hobbies on the profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to the update all hobbies on the profile without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to the update all hobbies on the profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interests\": [\r\n    {\r\n      \"categories\": \"Creative\",\r\n      \"hobbies\": [\r\n        \"Writing\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Fun\",\r\n      \"hobbies\": [\r\n        \"Writing\",\r\n        \"Music\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Fitness\",\r\n      \"hobbies\": [\r\n        \"Cycling\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Others Interests\",\r\n      \"hobbies\": [\r\n        \"Pets\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/hobbies-interest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"hobbies-interest"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to update all hobbies on the profile information given without categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to the update all hobbies on the profile without inputting the categories\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to the update all hobbies on the profile without inputting the categories\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to the update all hobbies on the profile without inputting the categories\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the information without inputting the categories\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interests\": [\r\n    {\r\n      \"categories\": \"\",\r\n      \"hobbies\": [\r\n        \"Writing\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Fun\",\r\n      \"hobbies\": [\r\n        \"Writing\",\r\n        \"Music\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Fitness\",\r\n      \"hobbies\": [\r\n        \"Cycling\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"Others Interests\",\r\n      \"hobbies\": [\r\n        \"Pets\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/hobbies-interest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"hobbies-interest"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to update all hobbies on the profile information given without categories",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to the update all hobbies on the profile without inputting the hobbies\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to the update all hobbies on the profile without inputting the hobbies\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to the update all hobbies on the profile without inputting the hobbies\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the information without inputting the hobbies\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"interests\": [\r\n    {\r\n      \"categories\": \"\",\r\n      \"hobbies\": [\r\n        \"Writing\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"\",\r\n      \"hobbies\": [\r\n        \"Writing\",\r\n        \"Music\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"\",\r\n      \"hobbies\": [\r\n        \"Cycling\"\r\n      ]\r\n    },\r\n    {\r\n      \"categories\": \"\",\r\n      \"hobbies\": [\r\n        \"Pets\"\r\n      ]\r\n    }\r\n  ]\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/hobbies-interest",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"hobbies-interest"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Verify User",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to verify on the user profile.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on verify on the user profile successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on verify on the user profile within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to verify on the user profile \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to verify on the user profile\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/verify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to verify on the user profile given without token.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should GET the '401' status code when executing to verify on the user profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should GET the response below 2000 ms when executing to verify on the user profile without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should GET the 'Unauthorized' status code name when executing to verify on the user profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to GET the verify without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/verify",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"verify"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "See all user",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to see all the user information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"user_id\", jsonData.data._id);\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users information successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on see all the user information within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see all the user \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see all the user\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to see all the user given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should GET the '401' status code when executing to see on the user profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should GET the response below 2000 ms when executing to see on the user profile without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should GET the 'Unauthorized' status code name when executing to see on the user profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to GET the see all information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get Matches",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to see partner preference details",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on see partner preference details successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on verify on see partner preference details within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see on the see partner preference details \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see on the see partner preference details\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"marital\": \"Never Married\",\r\n  \"motherLanguage\": \"Bengali (Bangla)\",\r\n  \"country\": \"Bangladesh\",\r\n  \"education\": \"BSC\",\r\n  \"skip\": 0,\r\n  \"isToday\": false,\r\n  \"isNew\": false,\r\n  \"religion\": \"all\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/getMatches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"getMatches"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to see partner preference details given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should GET the '401' status code when executing to see on the user profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should GET the response below 2000 ms when executing to see on the user profile without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should GET the 'Unauthorized' status code name when executing to see on the user profile without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to GET the partner preference without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"marital\": \"Never Married\",\r\n  \"motherLanguage\": \"Bengali (Bangla)\",\r\n  \"country\": \"Bangladesh\",\r\n  \"education\": \"BSC\",\r\n  \"skip\": 0,\r\n  \"isToday\": false,\r\n  \"isNew\": false,\r\n  \"religion\": \"all\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/getMatches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"getMatches"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to see partner preference details given without page number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to see partner preference details without inputting the page number\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to see partner preference details without inputting the page number\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to see partner preference details without inputting the page number\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the page number\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": ,\r\n  \"limit\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"marital\": \"Never Married\",\r\n  \"motherLanguage\": \"Bengali (Bangla)\",\r\n  \"country\": \"Bangladesh\",\r\n  \"education\": \"BSC\",\r\n  \"skip\": 0,\r\n  \"isToday\": false,\r\n  \"isNew\": false,\r\n  \"religion\": \"all\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/getMatches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"getMatches"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to see partner preference details given without limit number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to see partner preference details without inputting the limit number\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to see partner preference details without inputting the limit number\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to see partner preference details without inputting the limit number\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the partner preference without inputting the limit number\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": ,\r\n  \"sort_by\": \"newest\",\r\n  \"marital\": \"Never Married\",\r\n  \"motherLanguage\": \"Bengali (Bangla)\",\r\n  \"country\": \"Bangladesh\",\r\n  \"education\": \"BSC\",\r\n  \"skip\": 0,\r\n  \"isToday\": false,\r\n  \"isNew\": false,\r\n  \"religion\": \"all\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/getMatches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"getMatches"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to see partner preference details given without registered day information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to see partner preference details without inputting the registered day information\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to see partner preference details without inputting the registered day information\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to see partner preference details without inputting the registered day information\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the partner preference without inputting the registered day information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"marital\": \"Never Married\",\r\n  \"motherLanguage\": \"Bengali (Bangla)\",\r\n  \"country\": \"Bangladesh\",\r\n  \"education\": \"BSC\",\r\n  \"skip\": 0,\r\n  \"isToday\": ,\r\n  \"isNew\": false,\r\n  \"religion\": \"all\"\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/getMatches",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"getMatches"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Premium Matchs",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to find the premium matches",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on find premium matches successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the find premium matches within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to find premium matches\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to find premium matches\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": 1,\r\n  \"skip\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/premium-match",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"premium-match"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to find premium matches given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to find premium matches without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to find premium matches without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to find premium matches without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": 1,\r\n  \"skip\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/premium-match",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"premium-match"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find premium matches given without token page limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to invite friend to use biye korun page without inputting the page limit\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to invite friend to use biye korun page without inputting the page limit\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to invite friend to use biye korun page without inputting the page limit\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the page limit\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": ,\r\n  \"skip\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/premium-match",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"premium-match"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to find premium matches given without page number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to invite friend to use biye korun page without inputting the page number\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to invite friend to use biye korun page without inputting the page number\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to invite friend to use biye korun page without inputting the page number\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the page number\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": ,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": 1,\r\n  \"skip\": 0\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/premium-match",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"premium-match"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Search User",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to search previous created account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on search previous created account\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on verify on the user profile within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to search previous created account\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to verify on the user profile\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"query\": \"firstName/lastName/userId/city/residencyStatus/maritalStatus/workingWith/occupation/employer/education/college\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"search"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to search previous created account given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to search previous created account without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to search previous created account without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Unauthorized' status code when executing to search previous created account without inputting the token \", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to search previous created account without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to search previous created account without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": 1,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"query\": \"firstName/lastName/userId/city/residencyStatus/maritalStatus/workingWith/occupation/employer/education/college\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to search previous created account given without page number",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to search previous created account without inputting the page number\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to search previous created account without inputting the page number\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Bad Request' status code when executing to search previous created account without inputting the page number \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to search previous created account without inputting the page number \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to search previous created account without inputting the page number\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\": ,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"query\": \"firstName/lastName/userId/city/residencyStatus/maritalStatus/workingWith/occupation/employer/education/college\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to search previous created account given without page limit",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to search previous created account without inputting the page limit\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to search previous created account without inputting the page limit\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Bad Request' status code when executing to search previous created account without inputting the page limit \", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to search previous created account without inputting the page limit \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to search previous created account without inputting the page limit\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\":1 ,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\": ,\r\n  \"skip\": 0,\r\n  \"query\": \"firstName/lastName/userId/city/residencyStatus/maritalStatus/workingWith/occupation/employer/education/college\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"search"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to search previous created account given without query path",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '404' status code when executing to search previous created account without inputting the query path\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to search previous created account without inputting the query path\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'Not Found' status code when executing to search previous created account without inputting the query path\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to search previous created account without inputting the query path\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to search previous created account without inputting the query path\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"page\":1 ,\r\n  \"sort_by\": \"newest\",\r\n  \"limit\":1 ,\r\n  \"skip\": 0,\r\n  \"query\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/search",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"search"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Invite Friendship",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to invite friend to use biye korun page",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on invite friend to use biye korun page successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on invite friend to use biye korun page within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to invite friend to use biye korun page\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to invite friend to use biye korun page\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"requester\": \"650bb6cf672c611b32bdd0cc\",\r\n    \"recipient\": \"65019a1a9bf876161137fca8\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriends"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to invite friend to use biye korun page given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to invite friend to use biye korun page without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to invite friend to use biye korun page without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to invite friend to use biye korun page without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"requester\": \"{{$randomPhoneNumber}}\",\r\n    \"recipient\": \"65019a1a9bf876161137fca8\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriends"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to invite friend to use biye korun page given without requester id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to invite friend to use biye korun page without inputting the requester id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to invite friend to use biye korun page without inputting the requester id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to invite friend to use biye korun page without inputting the requester id\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the requester id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"requester\": \"\",\r\n    \"recipient\": \"65019a1a9bf876161137fca8\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriends"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to invite friend to use biye korun page given without recipient id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to invite friend to use biye korun page without inputting the recipient id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to invite friend to use biye korun page without inputting the recipient id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to invite friend to use biye korun page without inputting the recipient id\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the recipient id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\r\n  {\r\n    \"requester\": \"{{$randomPhoneNumber}}\",\r\n    \"recipient\": \"\"\r\n  }\r\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriends"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Single invite",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to see on the single invite",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"Single User invite ID\", jsonData.data._id);\r",
											"\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on verify on the see on the single invite\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on verify on the see on the single invite within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see on the single invite\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see on the single invite\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"recipient\": \"653ccd34d43efb3921b73073\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/single-invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"single-invite"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to invite single friend to use biye korun page given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to invite single friend to use biye korun page without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to invite single friend to use biye korun page without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to invite single friend to use biye korun page without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to invite single friend to use biye korun page without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to invite single friend to use biye korun page without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"recipient\": \"{{$randomPhoneNumber}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/single-invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"single-invite"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to invite single friend to use biye korun page given without recipient id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to invite single friend to use biye korun page without inputting the recipient id\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Imegration spacilist should get the response below 2000 ms when executing to invite single friend to use biye korun page without inputting the recipient id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to invitesingle friend to use biye korun page without inputting the recipient id\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'false' message when executing to invite single friend to use biye korun page without inputting the recipient id \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to can able to get the checklist without inputting the recipient id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"recipient\": \"\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/single-invite",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"single-invite"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Friendship status",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to see all friends information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on verify on the all friends information\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on verify on the all friends information within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to all friends information invite friend \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to verify on the all friends information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/friendship/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"friendship",
										"all"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to see all friends information given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to see all friends information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to see all friends information without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to see all friends information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to see all friends information without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see all friends information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/friendship/all",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"friendship",
										"all"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update Friends",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to update on the friend request status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"Update friendship ID\", jsonData.data._id);\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on update on the friend request status\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on update on the friend request status within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to update on the friend request status \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update on the friend request status\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"accepted\",\r\n  \"friendshipId\": \"{{Single User invite ID}}\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/updatefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"updatefriends"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to update on the friend request status given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to update on the friend request status without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to update on the friend request status without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to update on the friend request status without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to update on the friend request without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update on the friend request status without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"accepted\",\r\n  \"friendshipId\": \"650be1dc83527c2a6eb151ee\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/updatefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"updatefriends"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to update on the friend request given without status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to update on the friend request  without inputting the status\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to update on the friend request  without inputting status\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to update on the friend request without inputting the status\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'false' message when executing to update on the friend request without inputting the status \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update on the friend request without inputting the status\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": \"\",\r\n  \"friendshipId\": \"650be1dc83527c2a6eb151ee\"\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/updatefriends",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"updatefriends"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Friendship Count",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to count total pending and accept requests.",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on count total pending and accept requests\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on count total pending and accept requests within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to count total pending and accept requests\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to count total pending and accept requests\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/friendship-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"friendship-count"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to count total pending and accept requests given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to count total pending and accept requests without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to count total pending and accept requests without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to count total pending and accept requests without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to count total pending and accept requests without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to count total pending and accept requests without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/friendship-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"friendship-count"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Invite friendship",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to get own Invite friend list",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"var jsonData = JSON.parse(responseBody)\r",
											"pm.environment.set(\"Invite friend_ID\", jsonData.data[0]?._id);\r",
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can see all the users on get own Invite friend list\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can see all the users on get own Invite friend list within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to get own Invite friend list\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get own Invite friend list\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriendship/all?status =accepted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriendship",
										"all"
									],
									"query": [
										{
											"key": "status ",
											"value": "accepted"
										}
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to get own Invite friend list given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to get own Invite friend list without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to get own Invite friend list without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to get own Invite friend list without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get own Invite friend list without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get own Invite friend list without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriendship/all?status =accepted",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriendship",
										"all"
									],
									"query": [
										{
											"key": "status ",
											"value": "accepted"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user, I shouldn't be able to get own Invite friend list given without query params",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '404' status code when executing to get own Invite friend list without inputting the query params\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to get own Invite friend list without inputting query params\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Not Found' status code name when executing to get own Invite friend list without inputting the query params\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get own Invite friend list without inputting the query params \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get own Invite friend list without inputting the query params\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/invitefriendship/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invitefriendship",
										""
									],
									"query": [
										{
											"key": "status ",
											"value": "accepted",
											"disabled": true
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Invite Friendship count",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to  get own Invite friend list count",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"Admin can able to get own invite friend list count successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"Admin can able to get own invite friend list count within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"Admin get 'OK' status code when executing to get own invite friend list count\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"Admin get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get own invite friend list count\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/invite-friendship-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invite-friendship-count"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to  count own Invite friend list  given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to count own Invite friend list without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to count own Invite friend list without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to count own Invite friend list without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get count own Invite friend list without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to count own Invite friend list without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/invite-friendship-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"invite-friendship-count"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Update user profile",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "User should be able to  update any profile information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can able  to  update any profile information successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to  update any profile information within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to  update any profile information \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'Successfully updated' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Successfully updated\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"User the response header of the request to update any profile information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"Mitul\",\r\n  \"middleName\": \"\",\r\n  \"lastName\": \"Das\",\r\n  \"profilePicture\": \"{{Upload ImageID_USER}}\",\r\n  \"about\": {\r\n    \"aboutMe\": \"SQA Engineer\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n  },\r\n  \"basicInfo\": {\r\n    \"diet\": \"Vegiterian\",\r\n    \"bloodGroup\": \"A+\",\r\n    \"maritalStatus\": \"Never Married\",\r\n    \"height\": \"5.9\",\r\n    \"weight\": \"100\",\r\n    \"dateOfBirth\": \"2023-10-29\",\r\n    \"gender\": \"Male\"\r\n  },\r\n  \"community\": {\r\n    \"religion\": \"Hindu\",\r\n    \"language\": [\r\n      \"Bangla\",\r\n      \"English\",\r\n      \"Urdu\"\r\n    ],\r\n    \"nativeLanguage\": \"Bengali\"\r\n  },\r\n  \"interestAndMore\": {\r\n    \"interests\": [\r\n      {\r\n        \"categories\": \"Fun\",\r\n        \"hobbies\": [\r\n          \"computing\"\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"family\": {\r\n    \"noOfBrothers\": 0,\r\n    \"brothersMarried\": false,\r\n    \"noOfSisters\": 1,\r\n    \"sistersMarried\": true,\r\n    \"children\": \"No\",\r\n    \"familyState\": \"Rajshahi\",\r\n    \"familyCity\": \"Naogaon\",\r\n    \"familyCountry\": \"Bangladesh\",\r\n    \"familyIncome\": \"20000\",\r\n    \"familyValues\": \"\",\r\n    \"fatherProfession\": \"Farmer\",\r\n    \"livingWith\": \"Family\",\r\n    \"motherProfession\": \"Home Maker\",\r\n    \"noOfKids\": \"0\",\r\n    \"type\": \"Join Family\"\r\n  },\r\n  \"educationCareer\": {\r\n    \"education\": \"BSc in Computer Science and Engineering\",\r\n    \"college\": \"Green University of Bangladesh\",\r\n    \"income\": {\r\n      \"min\": \"10000\",\r\n      \"max\": \"20000\"\r\n    },\r\n    \"employer\": \"ts4u.us\",\r\n    \"industry\": \"Software industry\",\r\n    \"occupation\": \"Software Engineer\",\r\n    \"workingWith\": \"Private Company\"\r\n  },\r\n  \"location\": {\r\n    \"state\": \"Dhaka\",\r\n    \"city\": \"Dhaka\",\r\n    \"country\": \"Bangladesh\",\r\n    \"livingSince\": \"02 Years\",\r\n    \"residencyStatus\": \"Permanent Resident\",\r\n    \"zipCode\": \"1230\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/update-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"update-profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to update the profile information without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to update the profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an user should get the response below 2000 ms when executing to update the profile information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an user should get the 'Unauthorized' status code name when executing to update the profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to update the profile information without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update the profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"firstName\": \"Mitul\",\r\n  \"middleName\": \"\",\r\n  \"lastName\": \"Das\",\r\n  \"profilePicture\": \"{{Upload ImageID_USER}}\",\r\n  \"about\": {\r\n    \"aboutMe\": \"SQA Engineer\"\r\n  },\r\n  \"phone\": {\r\n    \"number\": \"1775069169\",\r\n    \"countryCode\": \"880\"\r\n  },\r\n  \"basicInfo\": {\r\n    \"diet\": \"Vegiterian\",\r\n    \"bloodGroup\": \"A+\",\r\n    \"maritalStatus\": \"Never Married\",\r\n    \"height\": \"5.9\",\r\n    \"weight\": \"100\",\r\n    \"dateOfBirth\": \"2023-10-29\",\r\n    \"gender\": \"Male\"\r\n  },\r\n  \"community\": {\r\n    \"religion\": \"Hindu\",\r\n    \"language\": [\r\n      \"Bangla\",\r\n      \"English\",\r\n      \"Urdu\"\r\n    ],\r\n    \"nativeLanguage\": \"Bengali\"\r\n  },\r\n  \"interestAndMore\": {\r\n    \"interests\": [\r\n      {\r\n        \"categories\": \"Fun\",\r\n        \"hobbies\": [\r\n          \"computing\"\r\n        ]\r\n      }\r\n    ]\r\n  },\r\n  \"family\": {\r\n    \"noOfBrothers\": 0,\r\n    \"brothersMarried\": false,\r\n    \"noOfSisters\": 1,\r\n    \"sistersMarried\": true,\r\n    \"children\": \"No\",\r\n    \"familyState\": \"Rajshahi\",\r\n    \"familyCity\": \"Naogaon\",\r\n    \"familyCountry\": \"Bangladesh\",\r\n    \"familyIncome\": \"20000\",\r\n    \"familyValues\": \"\",\r\n    \"fatherProfession\": \"Farmer\",\r\n    \"livingWith\": \"Family\",\r\n    \"motherProfession\": \"Home Maker\",\r\n    \"noOfKids\": \"0\",\r\n    \"type\": \"Join Family\"\r\n  },\r\n  \"educationCareer\": {\r\n    \"education\": \"BSc in Computer Science and Engineering\",\r\n    \"college\": \"Green University of Bangladesh\",\r\n    \"income\": {\r\n      \"min\": \"10000\",\r\n      \"max\": \"20000\"\r\n    },\r\n    \"employer\": \"ts4u.us\",\r\n    \"industry\": \"Software industry\",\r\n    \"occupation\": \"Software Engineer\",\r\n    \"workingWith\": \"Private Company\"\r\n  },\r\n  \"location\": {\r\n    \"state\": \"Dhaka\",\r\n    \"city\": \"Dhaka\",\r\n    \"country\": \"Bangladesh\",\r\n    \"livingSince\": \"02 Years\",\r\n    \"residencyStatus\": \"Permanent Resident\",\r\n    \"zipCode\": \"1230\"\r\n  }\r\n}\r\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/update-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"update-profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Single User",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to see single user profile information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to see single user profile information successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to see single user profile information within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see single user profile information \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see single user profile information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/user-profile/{{User ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"user-profile",
										"{{User ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user,I shouldn't be able to get single user profile information without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"As an User should get the '401' status code when executing to get single user profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User should get the response below 2000 ms when executing to get single user profile information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User should get the 'Unauthorized' status code name when executing to get single user profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get single user profile information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get single user profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/user-profile/{{user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"user-profile",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "As an user ,I shouldn't be able to get single user profile information without the user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"As an User should get the '404' status code when executing to get single user profile information without the user_id\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User should get the response below 2000 ms when executing to get single user profile information without the user_id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User should get the 'Not Found' status code name when executing to get single user profile information without the user_id\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get single user profile information without the user_id\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Route not found\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get single user profile information without the user_id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/user-profile/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"user-profile",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "View Profile",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to view own profile information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to view own profile information successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to view own profile information within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to view own profile information \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view own profile information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/view-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"view-profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to view on the profile information given without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"As an User should get the '401' status code when executing to view own profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User should get the response below 2000 ms when executing to view own profile information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User should get the 'Unauthorized' status code name when executing to view own profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to view own profile information without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view own profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/view-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"view-profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Create profile view",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "User should be able to create view profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to view another profile successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to view another profile within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to view another profile \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Profile view already recorded\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view another profile\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"65026dd99bf876161137fd9b\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/create-view-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"create-view-profile"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "User should not be able to create view profile without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '401' status code when executing to view another profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to view another profile information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to view another profile information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to view another profile information without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view another profile information without inputting the token \", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "noauth"
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"65026dd99bf876161137fd9b\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/create-view-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"create-view-profile"
									]
								}
							},
							"response": []
						},
						{
							"name": "User should not be able to create view profile without the userId",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User should get the '400' status code when executing to view another profile information without userId\", function () {\r",
											"    pm.response.to.have.status(400);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to view another profile information without inputting the userId\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Bad Request' status code name when executing to view another profile information without inputting the userId\", function () {\r",
											"    pm.response.to.have.status(\"Bad Request\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to view another profile information without the userId \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view another profile information without userId \", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "POST",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"userId\": \"\"\r\n}"
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/create-view-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"create-view-profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Recent visitors",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to view recent visitors profile information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to view recent visitors profile information successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to View recent visitors information within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to view recent visitors profile information \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view recent visitors information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/recent-visitors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"recent-visitors"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user ,I shouldn't be able to view recent visitors  profile information without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"As an User spacilist should get the '401' status code when executing to view recent visitors  profile information without inputting token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User  should get the response below 2000 ms when executing to view recent visitors  profile information without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User  should get the 'Unauthorized' status code name when executing to view recent visitors  profile information without inputting token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to view recent visitors  profile information without inputting token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to view recent visitors  profile information without inputting token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/recent-visitors",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"recent-visitors"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "My photos",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user , I should be able to see my all profile photos",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to see my all profile photos successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to see my all profile photos within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see my all profile photos\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see my all profile photos\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/myphotos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"myphotos"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user,I shouldn't be able to see profile photos  without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User get the '401' status code when executing to see all the profile photos without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User  should get the response below 2000 ms when executing to see all the profile photos without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User  should get the 'Unauthorized' status code name when executing to see all the profile photos without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to see all the profile photos without inputting the token\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see all the profile photos without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/myphotos",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"myphotos"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Public profile",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to see public profile",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User get the public profile successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User get the public profile within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing try to get public profile information \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get public profile information\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/public-profile",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"public-profile"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Compare partner preference",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "User should be able to get the partner preference by comparing with own account",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to get the partner preference by comparing with own account successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to get the partner preference by comparing with own account within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to get the partner preference by comparing with own account \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get the partner preference by comparing with own account\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/compare-partner-preference/{{User ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"compare-partner-preference",
										"{{User ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to get the partner preference by comparing with own account without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"As an User spacilist should get the '401' status code when executing to get the partner preference  without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User  should get the response below 2000 ms when executing to get the partner preference  without inputting the token without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User  should get the 'Unauthorized' status code name when executing to get the partner preference without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get the partner preference  without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get the partner preference without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/compare-partner-preference/{{User ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"compare-partner-preference",
										"{{User ID}}"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Get Contact",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to get contact information",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to see compare partner preference successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to see compare partner preference within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//////////////////////////Failed this request you can change User Login Email and Password(Free Member view only three Account)//////////////////////////\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to see compare partner preference \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to see compare partner preference\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/get-contact/{{User ID}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"get-contact",
										"{{User ID}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to get the contact information without inputting the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User get the '401' status code when executing to get the contact information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User  should get the response below 2000 ms when executing to get the contact information without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User  should get the 'Unauthorized' status code name when executing to get the contact information without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get the contact information without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get the contact information without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/get-contact/{{user_id}}",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"get-contact",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "User shouldn't be able to get the contact information without user_id",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User get the '404' status code when executing to get the contact information without user_id\", function () {\r",
											"    pm.response.to.have.status(404);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User  should get the response below 2000 ms when executing to get the contact information without user_id\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User  should get the 'Internal Server Error' status code name when executing to get the contact information without user_id\", function () {\r",
											"    pm.response.to.have.status(\"Not Found\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get the contact information without user_id \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get the contact information without user_id\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/get-contact/",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"get-contact",
										""
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Match count",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user, I should be able to get total number of matching",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to get total number of matching successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to get total number of matching within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to get total number of matching \", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get total number of matching\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [
									{
										"key": "accept",
										"value": "*/*"
									}
								],
								"url": {
									"raw": "{{baseUrl}}/api/user/match-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"match-count"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I should not be able to get total number of matching without the token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User get the '401' status code when executing to get total number of matching without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"As an User  should get the response below 2000 ms when executing to get total number of matching without inputting the token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"As an User  should get the 'Unauthorized' status code name when executing to get total number of matching without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to get total number of matching without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to get total number of matching without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/user/match-count",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"match-count"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Hide Unhide",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As an user,I should be able to update user hide/unhide status",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User can able to update user hide/unhide status successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to update user hide/unhide status within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
											"});\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to update user hide/unhide status\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update user hide/unhide status\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/hide-unhide",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"hide-unhide"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Negative",
					"item": [
						{
							"name": "As an user, I shouldn't be able to update user hide/unhide status without token",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"//Validate the status code\r",
											"pm.test(\"User spacilist should get the '401' status code when executing to update user hide/unhide status without inputting the token\", function () {\r",
											"    pm.response.to.have.status(401);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User should get the response below 2000 ms when executing to update user hide/unhide status without inputting token\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
											"});\r",
											"//Validate the status code name\r",
											"pm.test(\"User should get the 'Unauthorized' status code name when executing to update user hide/unhide status without inputting the token\", function () {\r",
											"    pm.response.to.have.status(\"Unauthorized\");\r",
											"});\r",
											"pm.test(\"User get 'false' message when executing to update user hide/unhide status without inputting the token \", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"success\");\r",
											"    pm.expect(pm.response.text()).to.include(\"false\");\r",
											"});\r",
											"//Validate the response headers\r",
											"pm.test(\"Validate the response header of the request to update user hide/unhide status without inputting the token\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"    pm.response.to.have.header(\"Date\");\r",
											"    pm.response.to.have.header(\"Connection\");\r",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "PATCH",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\r\n  \"status\": true\r\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{baseUrl}}/api/user/hide-unhide",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"user",
										"hide-unhide"
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Chat",
			"item": [
				{
					"name": "Create Initital Chat",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to create Initital chat",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"var jsonData = JSON.parse(responseBody)\r",
													"pm.environment.set(\"Chat ID\", jsonData.chat._id);\r",
													"\r",
													"//Validate the status code\r",
													"pm.test(\"User can able to create Initital chat successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to create Initital chat within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to create Initital chat\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to create Initital chat\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/chat/findorcreate/{{User ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"findorcreate",
												"{{User ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "My Chats",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to get my chats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to get my chats successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to get my chats within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to get my chats\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get my chats\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/chat/mychats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"mychats"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I shouldn't be able to get my chats given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '401' status code when executing to get my chats without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to get my chats without inputting token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get the 'Unauthorized' status code name when executing to get my chats without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to get my chats without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get my chats without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/chat/mychats",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"mychats"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Chat Message",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user,should be able to find new chats",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to get my chats successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to get my chats within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to get my chats\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get my chats\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/chat/{{Chat ID}}/messages",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"{{Chat ID}}",
												"messages"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Fail)Send message",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user,should be able to send message using chid id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PUT",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"content\": \"<p>Hello! Protik bhai...</p>\",\r\n  \"files\": \"Something New\",\r\n  \"type\": \"text\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/chat/sendmessage/{{Chat ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"sendmessage",
												"{{Chat ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Upload chat file",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user,should be able to upload chat file and return this file location url",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "file",
													"type": "file",
													"src": "/C:/Users/TS4U/Desktop/1000_F_107587971_V5LF7HVAwCICEFrcG61VQvl45Ey5eRn0.jpg"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/chat/file",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"file"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Upload chat audio file",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user,should be able to upload chat audio file and return this file location url",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "audio",
													"type": "file",
													"src": "/C:/Users/TS4U/Desktop/Myanmar's Geography Problem..mp3"
												}
											]
										},
										"url": {
											"raw": "{{baseUrl}}/api/chat/sendaudio/{{Chat ID}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"sendaudio",
												"{{Chat ID}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Fail)Update message",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user,should be able to update message by using message id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"chatcontent\": \"<p>asdfsdf asdfdf adffd</p>\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/chat/update/message/64eecac80620579ac6fb3204",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"chat",
												"update",
												"message",
												"64eecac80620579ac6fb3204"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "(Fail)Delete Message",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user,should be able to delete message by using message id",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "DELETE",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/delete/message/64eecac80620579ac6fb3204",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"delete",
												"message",
												"64eecac80620579ac6fb3204"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "User Management",
			"item": [
				{
					"name": "Get all User",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to see all the user on the  user management",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can see all the users on user management successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can see all the users on user management within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see all user on the  user management \", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all user on the  user management\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"isToday\": false,\r\n  \"isNew\": false,\r\n  \"sort_by\": \"newest\",\r\n  \"query\": \"firstName, lastName, email, country, gender, postedBy, userId, religion\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/all-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"all-user"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I should not be able to see all the user on user management without inputting the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User should get the '401' status code when executing to see all the user on user management without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to see all the user on user management without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get 'Unauthorized' status code name when executing to see all the user on user management without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"User should get 'Authorization required' message when executing to see all the user on user management without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to see all the user on user management without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"isToday\": false,\r\n  \"isNew\": false,\r\n  \"sort_by\": \"newest\",\r\n  \"query\": \"firstName, lastName, email, country, gender, postedBy, userId, religion\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/all-user",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"all-user"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Active/Deactive Status",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to update status on the  user management",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can update status on the  user management successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can update status on the  user management within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to update status on the  user management\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to update status on the  user management\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": \"650eb6367a48eef0a2ed0f32\",\r\n  \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/active-deactive",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"active-deactive"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I shouldn't be able toupdate status on the  user management given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User should get the '401' status code when executing to update status on the user management without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to update status on the user management without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get 'Unauthorized' status code name when executing to update status on the user management without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"User should get 'Authorization required' message when executing to update status on the user management without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to update status on the  user management without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": \"650eb6367a48eef0a2ed0f32\",\r\n  \"isActive\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/active-deactive",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"active-deactive"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Send message",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to send message by using email/phone from admin to user one to one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can see all the users on send message by using email/phone from admin to user one to one\", function () {\r",
													"    pm.response.to.have.status(403);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can send message by using email/phone from admin to user one to one within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'Forbidden' status code when send message by using email/phone from admin to user one to one\", function () {\r",
													"    pm.response.to.have.status(\"Forbidden\");\r",
													"});\r",
													"\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to send message by using email/phone from admin to user one to one\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_RefreshToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": \"6502b688c8f87b4fdfd94dab\",\r\n  \"subject\": \"This is test email\",\r\n  \"message\": \"This message is generate for only test purpose.\",\r\n  \"isEmail\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/send-message",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"send-message"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I should be able to send message by using email/phone from admin to user one to one",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User should get the '401' status code when executing to send message by using email/phone from admin to user one to one without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to send message by using email/phone from admin to user one to one without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get 'Unauthorized' status code name when executing to send message by using email/phone from admin to user one to one without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"User should get 'Authorization required' message when executing to send message by using email/phone from admin to user one to one without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to send message by using email/phone from admin to user one to one without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": \"6502b688c8f87b4fdfd94dab\",\r\n  \"subject\": \"This is test email\",\r\n  \"message\": \"This message is generate for only test purpose.\",\r\n  \"isEmail\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/send-message",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"send-message"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User partner Preference",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to get user partner preference",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can see all get user partner preference successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can see all get user partner preference within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see get user partner preference\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get user partner preference\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_RefreshToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": \"6502b688c8f87b4fdfd94dab\",\r\n  \"subject\": \"This is test email\",\r\n  \"message\": \"This message is generate for only test purpose.\",\r\n  \"isEmail\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/partner-preference/{{user_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"partner-preference",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I shouldn't be able to get user partner preference without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User should get the '401' status code when executing to see all the user on user management without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to get user partner preference without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get 'Unauthorized' status code name when executing to get user partner preference without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"\r",
													"//Validate the response body\r",
													"pm.test(\"User should get 'Authorization required' message when executing to get user partner preference without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Authorization required\");\r",
													"\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"Validate the response header of the request to get user partner preference without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"protocolProfileBehavior": {
										"disableBodyPruning": true
									},
									"request": {
										"method": "GET",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"userId\": \"6502b688c8f87b4fdfd94dab\",\r\n  \"subject\": \"This is test email\",\r\n  \"message\": \"This message is generate for only test purpose.\",\r\n  \"isEmail\": true\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/user/partner-preference/{{user_id}}",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"partner-preference",
												"{{user_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Payment",
			"item": [
				{
					"name": "SSL Linit",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, i should be able to payment on the  SSL commerz initial",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to create the staff successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to payment on the  SSL commerz initial within 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'Created' status code when executing to payment on the  SSL commerz initial\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'Succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to payment on the  SSL commerz initial\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"BDT\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/sslinit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"sslinit"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, i shouldn't be able to payment on the  SSL commerz initial given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '401' status code when executing to payment on the  SSL commerz initial without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to payment on the  SSL commerz initial without inputting token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get the 'Unauthorized' status code name when executing to payment on the  SSL commerz initial without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to payment on the  SSL commerz initial without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to payment on the  SSL commerz initial without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"BDT\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/sslinit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"sslinit"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, i shouldn't be able to payment on the  SSL commerz initial given without currency type",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '500' status code when executing to payment on the  SSL commerz initial without inputting the currency type\", function () {\r",
													"    pm.response.to.have.status(500);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to payment on the  SSL commerz initial without inputting currency type\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get the 'Internal Server Error' status code name when executing to payment on the  SSL commerz initial without inputting the currency type\", function () {\r",
													"    pm.response.to.have.status(\"Internal Server Error\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to payment on the  SSL commerz initial without inputting the currency type \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to payment on the  SSL commerz initial without inputting the currency type\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/sslinit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"sslinit"
											]
										}
									},
									"response": []
								},
								{
									"name": "As an admin, i shouldn't be able to payment on the  SSL commerz initial given without Package ID",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '400' status code when executing to payment on the SSL commerz initial without inputting the Package ID\", function () {\r",
													"    pm.response.to.have.status(400);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to payment on the SSL commerz initial without inputting Package ID\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to payment on the SSL commerz initial without inputting the Package ID \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to payment on the  SSL commerz initial without inputting the Package ID\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"BDT\",\r\n  \"packageId\": \"\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/sslinit",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"sslinit"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "All Payment",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an admin, i should be able to see all payment information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to create the staff successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to payment on the see all payment information within 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see all payment information\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'Succeed' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"message\");\r",
													"    pm.expect(pm.response.text()).to.include(\"Succeed\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all payment information\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"sort_by\": \"newest\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/get-all-payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"get-all-payments"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an admin, i should be able to see all payment information given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '401' status code when executing to see all payment information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to see all payment information without inputting token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get the 'Unauthorized' status code name when executing to see all payment information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to see all payment information without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all payment information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"page\": 1,\r\n  \"limit\": 1,\r\n  \"skip\": 0,\r\n  \"sort_by\": \"newest\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/get-all-payments",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"get-all-payments"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Paypal Order",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, i should be able to confirm on the package order",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to create the staff successfully\", function () {\r",
													"    pm.response.to.have.status(201);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to payment on the see all payment information within 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'Created' status code when executing to see all payment information\", function () {\r",
													"    pm.response.to.have.status(\"Created\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all payment information\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"USD\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/paypal/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"paypal",
												"orders"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, i should not be able to confirm on the package order given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '401' status code when executing to confirm on the package order without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to confirm on the package order without inputting token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get the 'Unauthorized' status code name when executing to confirm on the package order without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to confirm on the package order without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all payment information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"USD\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/paypal/orders",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"paypal",
												"orders"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "CheckOut",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, i should be able to show on the payment confirm message",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to create the staff successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to payment on the see all payment information within 3000ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(3000);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see all payment information\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all payment information\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{Admin_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"USD\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/stripe/checkout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"stripe",
												"checkout"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, i should not be able to show on the payment confirm message given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User spacilist should get the '401' status code when executing to show on the payment confirm message without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User should get the response below 2000 ms when executing to show on the payment confirm message without inputting token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"User should get the 'Unauthorized' status code name when executing to show on the payment confirm message without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to show on the payment confirm message without inputting the token \", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all payment information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"currency\": \"USD\",\r\n  \"packageId\": \"650526682c649fe7162dcee0\"\r\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{baseUrl}}/api/payment/stripe/checkout",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"payment",
												"stripe",
												"checkout"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Global APIs",
			"item": [
				{
					"name": "Positive",
					"item": [
						{
							"name": "As a User, I should be able to find any university all over the world",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"\r",
											"//Validate the status code\r",
											"pm.test(\"User can able  to find any university all over the world successfully\", function () {\r",
											"    pm.response.to.have.status(200);\r",
											"});\r",
											"//validate the response time\r",
											"pm.test(\"User can able to find any university all over the world within 1500ms\", function () {\r",
											"    pm.expect(pm.response.responseTime).to.be.below(30000);\r",
											"});\r",
											"\r",
											"//validate the status code name\r",
											"pm.test(\"User get 'OK' status code when executing to find any university all over the world\", function () {\r",
											"    pm.response.to.have.status(\"OK\");\r",
											"});\r",
											"//validate the response body\r",
											"pm.test(\"User get 'Success' message successfully\", function () {\r",
											"    pm.expect(pm.response.text()).to.include(\"message\");\r",
											"    pm.expect(pm.response.text()).to.include(\"Success\");\r",
											"});\r",
											"\r",
											"//validate the response headers\r",
											"pm.test(\"User the response header of the request to find any university all over the world\", function () {\r",
											"    pm.response.to.have.header(\"Content-Type\");\r",
											"     pm.response.to.have.header(\"Date\");\r",
											"     pm.response.to.have.header(\"Connection\");\r",
											"});\r",
											"\r",
											""
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{user_AccessToken}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{baseUrl}}/api/global/university?name=Dhaka",
									"host": [
										"{{baseUrl}}"
									],
									"path": [
										"api",
										"global",
										"university"
									],
									"query": [
										{
											"key": "name",
											"value": "Dhaka"
										}
									]
								}
							},
							"response": []
						}
					]
				}
			]
		},
		{
			"name": "Dashboard Management",
			"item": [
				{
					"name": "Dashboard Information",
					"item": [
						{
							"name": "Posititve",
							"item": [
								{
									"name": "As  an user, I should be able to get the dashboard information",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to see dashboard information successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to see dashboard information within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see dashboard information\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see dashboard information\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});\r",
													"\r",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dashboard/info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dashboard",
												"info"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "User should not be able to get all the dashboard information given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"As an User should get the '401' status code when executing to get all the dashboard information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"As an User should get the response below 2000 ms when executing to get all the dashboard information without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"As an User should get the 'Unauthorized' status code name when executing to get all the dashboard information without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to get all the dashboard information without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get all the dashboard information without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/dashboard/info",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dashboard",
												"info"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "User Registration statistic",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to all dashboard statistic",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to all dashboard statistic successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to all dashboard statistic within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to all dashboard statistic\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to all dashboard statistic\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"startDate\": \"2023-09-01\",\r\n  \"endDate\": \"2023-10-03\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/dashboard/user-reg-statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dashboard",
												"user-reg-statistics"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "User should not be able to see all dashboard statistic without the token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"As an User should get the '401' status code when executing to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"As an User should get the response below 2000 ms when executing to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"As an User should get the 'Unauthorized' status code name when executing to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "noauth"
										},
										"method": "POST",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\r\n  \"startDate\": \"2023-09-01\",\r\n  \"endDate\": \"2023-10-03\"\r\n}"
										},
										"url": {
											"raw": "{{baseUrl}}/api/dashboard/user-reg-statistics",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"dashboard",
												"user-reg-statistics"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "Notification",
			"item": [
				{
					"name": "Get my notification",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "As an user, I should be able to get all the notifications",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"User can able to all dashboard statistic successfully\", function () {\r",
													"    pm.response.to.have.status(200);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"User can able to see all the notifications within 1500ms\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(1500);\r",
													"});\r",
													"\r",
													"//validate the status code name\r",
													"pm.test(\"User get 'OK' status code when executing to see all the notifications\", function () {\r",
													"    pm.response.to.have.status(\"OK\");\r",
													"});\r",
													"//validate the response body\r",
													"pm.test(\"User get 'success' message successfully\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"});\r",
													"\r",
													"//validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see all the notifications\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"     pm.response.to.have.header(\"Date\");\r",
													"     pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_AccessToken}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/notification/my-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"notification",
												"my-notifications"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "As an user, I shouldn't be able to see my all notification given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"As an User should get the '401' status code when executing to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"As an User should get the response below 2000 ms when executing to get all the dashboard statistic without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"As an User should get the 'Unauthorized' status code name when executing to see my all notification without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to see my all notification without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see my all notification without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [],
										"url": {
											"raw": "{{baseUrl}}/api/notification/my-notifications",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"notification",
												"my-notifications"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Marked read notification",
					"item": [
						{
							"name": "Positive",
							"item": [
								{
									"name": "User should be able to get marked notification",
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{user_RefreshToken}}",
													"type": "string"
												}
											]
										},
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/user/notification/mark-read/65028b572b627c19dce8ea30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"notification",
												"mark-read",
												"65028b572b627c19dce8ea30"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Negative",
							"item": [
								{
									"name": "User shouldn't  be able to get marked notification given without token",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Validate the status code\r",
													"pm.test(\"As an User should get the '401' status code when executing to get marked notification without inputting the token\", function () {\r",
													"    pm.response.to.have.status(401);\r",
													"});\r",
													"//validate the response time\r",
													"pm.test(\"As an User should get the response below 2000 ms when executing to get marked notification without inputting the token\", function () {\r",
													"    pm.expect(pm.response.responseTime).to.be.below(2000);\r",
													"});\r",
													"//Validate the status code name\r",
													"pm.test(\"As an User should get the 'Unauthorized' status code name when executing to get marked notification without inputting the token\", function () {\r",
													"    pm.response.to.have.status(\"Unauthorized\");\r",
													"});\r",
													"pm.test(\"User get 'false' message when executing to get marked notification without inputting the token\", function () {\r",
													"    pm.expect(pm.response.text()).to.include(\"success\");\r",
													"    pm.expect(pm.response.text()).to.include(\"false\");\r",
													"});\r",
													"//Validate the response headers\r",
													"pm.test(\"Validate the response header of the request to see my all notification without inputting the token\", function () {\r",
													"    pm.response.to.have.header(\"Content-Type\");\r",
													"    pm.response.to.have.header(\"Date\");\r",
													"    pm.response.to.have.header(\"Connection\");\r",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PATCH",
										"header": [
											{
												"key": "accept",
												"value": "*/*"
											}
										],
										"url": {
											"raw": "{{baseUrl}}/api/user/notification/mark-read/65028b572b627c19dce8ea30",
											"host": [
												"{{baseUrl}}"
											],
											"path": [
												"api",
												"user",
												"notification",
												"mark-read",
												"65028b572b627c19dce8ea30"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	]
}